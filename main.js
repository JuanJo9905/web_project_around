!function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,n(r.key),r)}}function n(t){var n=function(t,n){if("object"!=e(t)||!t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var r=o.call(t,"string");if("object"!=e(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==e(n)?n:n+""}var o=function(){return e=function e(t,n,o,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.texto=t,this.enlaceImagen=n,this.enlaceIconoEliminar=o,this.plantilla=document.querySelector(r).content.cloneNode(!0),this._elementoCard=this.plantilla.querySelector(".content__grid-card"),this._handleCardClick=i,this._inicializarCard()},(n=[{key:"_inicializarCard",value:function(){this._agregarDatos(),this._agregarEventListeners()}},{key:"_agregarDatos",value:function(){this._elementoCard.querySelector(".content__grid-card-name").textContent=this.texto,this._elementoCard.querySelector(".content__grid-image").src=this.enlaceImagen,this._elementoCard.querySelector(".content__grid-image-delete").src=this.enlaceIconoEliminar}},{key:"_agregarEventListeners",value:function(){var e=this;this._elementoCard.querySelector(".content__grid-like").addEventListener("click",this._handleLikeClick.bind(this)),this._elementoCard.querySelector(".content__grid-image-delete").addEventListener("click",this._handleDeleteClick.bind(this)),this._elementoCard.querySelector(".content__grid-image").addEventListener("click",(function(){e._handleCardClick(e.enlaceImagen,e.texto)}))}},{key:"_handleLikeClick",value:function(e){e.target.classList.toggle("content__grid-like-active")}},{key:"_handleDeleteClick",value:function(e){e.currentTarget.parentNode.remove()}},{key:"obtenerElementoCard",value:function(){return this._elementoCard}}])&&t(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,n}(),r=o;function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,u(o.key),o)}}function u(e){var t=function(e,t){if("object"!=i(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!=i(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==i(t)?t:t+""}var c=function(){return e=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._config=t,this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._submitButton=this._formElement.querySelector(this._config.submitButtonSelector)},(t=[{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._config.inputErrorClass),n.textContent=t,n.classList.add(this._config.errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.textContent="",t.classList.remove(this._config.errorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?(this._submitButton.classList.add(this._config.inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._config.inactiveButtonClass),this._submitButton.disabled=!1)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_setEventListeners",value:function(){var e=this;this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&a(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}(),l=c;function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,f(o.key),o)}}function f(e){var t=function(e,t){if("object"!=s(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!=s(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==s(t)?t:t+""}function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function _(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,d(o.key),o)}}function d(e){var t=function(e,t){if("object"!=m(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!=m(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==m(t)?t:t+""}function y(e,t,n){return t=b(t),function(e,t){if(t&&("object"==m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,v()?Reflect.construct(t,n||[],b(e).constructor):t.apply(e,n))}function v(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(v=function(){return!!e})()}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var o=function(e,t){for(;!{}.hasOwnProperty.call(e,t)&&null!==(e=b(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(arguments.length<3?e:n):r.value}},h.apply(null,arguments)}function b(e){return b=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},b(e)}function g(e,t){return g=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},g(e,t)}var S=function(e){function t(e,n){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(o=y(this,t,[e]))._handleFormSubmit=n,o._form=o._popup.querySelector(".popup__form"),o._inputList=o._form?o._form.querySelectorAll(".popup__input"):[],o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}(t,e),n=t,(o=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;h(b(t.prototype),"setEventListeners",this).call(this),this._form?this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())})):console.log("Form element is not found.")}},{key:"close",value:function(){h(b(t.prototype),"close",this).call(this),this._form&&this._form.reset()}}])&&_(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,o}(function(){return e=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._closeModal=this._closeModal.bind(this),this.setEventListeners(),this._popupSaveButton=this._popup.querySelector(".popup__window-form-button"),this._popupCloseButton=this._popup.querySelector(".popup__close")},(t=[{key:"open",value:function(){this._popup.classList.add("popup__enabled"),this._popup.querySelector(".popup__overlay").addEventListener("click",this._closeModal),this._popupSaveButton.disabled=!0,document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup__enabled"),this._popup.querySelector(".popup__overlay").removeEventListener("click",this._closeModal),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_closeModal",value:function(){this.close()}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close").addEventListener("click",(function(){e.close()})),this._popup.addEventListener("mousedown",(function(t){t.target.classList.contains("popup")&&e.close()}))}}])&&p(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}());function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function w(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,k(o.key),o)}}function k(e){var t=function(e,t){if("object"!=E(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!=E(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==E(t)?t:t+""}var C=function(){return e=function e(t){var n=t.nameSelector,o=t.jobSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=document.querySelector(n),this._jobElement=document.querySelector(o)},(t=[{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.job;this._nameElement.textContent=t,this._jobElement.textContent=n}}])&&w(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}(),L={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};document.addEventListener("DOMContentLoaded",(function(){Array.from(document.querySelectorAll(L.formSelector)).forEach((function(e){new l(L,e).enableValidation()}))})),document.querySelector(".content__explorer"),document.querySelector(".content__grid");var j=[{name:"Valle de Yosemite",link:"https://practicum-content.s3.us-west-1.amazonaws.com/new-markets/WEB_sprint_5/ES/yosemite.jpg"},{name:"Lago Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/new-markets/WEB_sprint_5/ES/lake-louise.jpg"},{name:"Montañas Calvas",link:"https://practicum-content.s3.us-west-1.amazonaws.com/new-markets/WEB_sprint_5/ES/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/new-markets/WEB_sprint_5/ES/latemar.jpg"},{name:"Parque Nacional de la Vanoise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/new-markets/WEB_sprint_5/ES/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/new-markets/WEB_sprint_5/ES/lago.jpg"}],q=document.querySelector(".content__grid");function P(e,t){var n=document.querySelector(".content__grid-poster"),o=n.querySelector(".content__grid-poster-close"),r=n.querySelector(".content__grid-poster-image"),i=n.querySelector(".content__grid-poster-name");r.src=e,r.alt=t,i.textContent=t,n.classList.add("content__grid-poster-enabled"),o.addEventListener("click",(function(){n.classList.remove("content__grid-poster-enabled")}))}document.addEventListener("DOMContentLoaded",(function(){j.forEach((function(e){var t=new r(e.name,e.link,"./images/Trash.svg","#content__grid",P);q.appendChild(t.obtenerElementoCard())}))}));var O=document.querySelector(".popup"),B=document.querySelector(".content__explorer-add-enable"),x=new S(".popup",R);B.addEventListener("click",(function(){x.open()}));var I=new C({nameSelector:".content__explorer-name",jobSelector:".content__explorer-job"}),T=document.querySelector("#edit"),V=(T.querySelector("#edit__window"),document.querySelector(".content__explorer-edit-enable")),D=new S("#edit",W);I.getUserInfo(),V.addEventListener("click",(function(){D.open()}));var M=O.querySelector(".popup__window-form-button"),z=T.querySelector("#edit__window-form-button");function R(){var e=O.querySelector("#popup__window-form-link"),t=O.querySelector("#popup__window-form-title"),n=new r(t.value,e.value,"./images/Trash.svg","#content__grid",P);q.appendChild(n.obtenerElementoCard()),e.value="",t.value="",O.classList.remove("popup__enabled")}function W(){var e=T.querySelector("#edit__window-form-name"),t=T.querySelector("#edit__window-form-title"),n=document.querySelector(".content__explorer-name"),o=document.querySelector(".content__explorer-job");n.textContent=e.value,o.textContent=t.value,T.classList.remove("popup__enabled")}M.addEventListener("click",R),z.addEventListener("click",W)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,